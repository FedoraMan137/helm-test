global:
  # storageClass: "ibmc-vpc-block-5iops-tier"  ## IBM Cloud
  storageClass: "ibmc-vpc-block-general-purpose"  ## IBM Cloud
  # storageClass: "default"  ## Azure
nameOverride: "one37-psql"
fullnameOverride: "one37-psql"

clusterDomain: cluster.local
extraDeploy: []
commonLabels: {}
commonAnnotations: {}
## Enable diagnostic mode in the statefulset
##
diagnosticMode:
  enabled: false

image:
  registry: docker.io
  repository: bitnami/postgresql
  tag: 15.4.0-debian-11-r10
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false
auth:
  secretKeys:
    adminPasswordKey: postgres-password
    userPasswordKey: password
    replicationPasswordKey: replication-password
  usePasswordFiles: false

architecture: standalone

containerPorts:
  postgresql: 5432

postgresqlDataDir: /bitnami/postgresql/data

postgresqlSharedPreloadLibraries: "pgaudit"

shmVolume:
  enabled: true
  sizeLimit: ""
## TLS configuration
##
tls:
  enabled: false
  autoGenerated: false

## @section PostgreSQL Primary parameters
##
primary:
  name: primary
  configuration: ""
  pgHbaConfiguration: ""
  existingConfigmap: ""
  extendedConfiguration: ""
  existingExtendedConfigmap: ""

  initdb:
    args: ""
    postgresqlWalDir: ""
    scripts: {}
    scriptsConfigMap: ""
    scriptsSecret: ""
    user: ""
    password: ""

  standby:
    enabled: false

  extraEnvVars: []
  command: []
  args: []

  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1

  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  lifecycleHooks: {}

  resources:
    limits: {}
    requests:
      memory: 256Mi
      cpu: 250m

  podSecurityContext:
    enabled: true
    fsGroup: 1001

  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsGroup: 0
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
        - ALL

  hostAliases: []
  hostNetwork: false
  hostIPC: false
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""

  podAntiAffinityPreset: soft

  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  extraVolumeMounts: []
  extraVolumes: []
  sidecars: []
  initContainers: []
  extraPodSpec: {}
  service:
    type: ClusterIP
    ports:
      postgresql: 5432
    nodePorts:
      postgresql: ""
    clusterIP: ""
    annotations: {}
    loadBalancerIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerSourceRanges: []
    extraPorts: []
    sessionAffinity: None
    sessionAffinityConfig: {}
    headless:
      annotations: {}
  persistence:
    enabled: true
    existingClaim: ""
    mountPath: /bitnami/postgresql
    subPath: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    labels: {}
    selector: {}
    dataSource: {}
  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenScaled: Retain
    whenDeleted: Retain


readReplicas:
  name: read
  replicaCount: 1
  extendedConfiguration: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  command: []
  args: []
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  lifecycleHooks: {}
  resources:
    limits: {}
    requests:
      memory: 256Mi
      cpu: 250m
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsGroup: 0
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
        - ALL
  hostAliases: []
  hostNetwork: false
  hostIPC: false
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  extraVolumeMounts: []
  extraVolumes: []
  sidecars: []
  initContainers: []
  extraPodSpec: {}
  service:
    type: ClusterIP
    ports:
      postgresql: 5432
    nodePorts:
      postgresql: ""
    clusterIP: ""
    annotations: {}
    loadBalancerIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerSourceRanges: []
    extraPorts: []
    sessionAffinity: None
    sessionAffinityConfig: {}
    headless:
      annotations: {}


  persistence:
    enabled: true
    existingClaim: ""
    mountPath: /bitnami/postgresql
    subPath: ""
    storageClass: ""
    accessModes:
    size: 8Gi
    annotations: {}
    labels: {}
    selector: {}
    dataSource: {}


  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenScaled: Retain
    whenDeleted: Retain


backup:
  enabled: false

networkPolicy:
  enabled: false
  metrics:
    enabled: false

volumePermissions:
  enabled: false

serviceBindings:
  enabled: false

serviceAccount:
  create: false

rbac:
  create: false
  rules: []
psp:
  create: false

metrics:
  enabled: false

  serviceMonitor:
    enabled: false

  prometheusRule:
    enabled: false
